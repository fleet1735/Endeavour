name: Ontology CI

on:
  push:
    branches: [ "main", "develop", "feature/**" ]
    paths:
      - "validator/**"
      - "tools/**"
      - "engines/**"
      - "ontology/**"
      - ".github/workflows/ontology_ci.yml"
      - "runs/sample_inputs/**"
  pull_request:
    branches: [ "main", "develop" ]
    paths:
      - "validator/**"
      - "tools/**"
      - "engines/**"
      - "ontology/**"
      - ".github/workflows/ontology_ci.yml"
  workflow_dispatch:

concurrency:
  group: ontology-ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  validate-ontology:
    name: Validate DSL, SSOT, Engine I/O & Smoke
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('validator/**/*.py','tools/**/*.py','engines/**/*.py','ontology/models/*.json') }}
          restore-keys: |
            pip-${{ runner.os }}-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml jsonschema

      - name: Prepare CI run directory
        run: mkdir -p runs/ci

      - name: Ensure sample SignalEvents
        run: |
          if [ ! -f "runs/sample_inputs/signal_events.jsonl" ]; then
            mkdir -p runs/sample_inputs
            cat > runs/sample_inputs/signal_events.jsonl << 'EOF'
{"ontology_version":"1.0.1","entity":"SignalEvent","event_id":"ev_ci_1","setup_ref":"MA_Crossover","instrument_ref":"KRX:005930","ts_event":"2024-12-02T00:00:00Z","payload":{"date":"2024-12-02","signal":"CROSS_UP"}}
{"ontology_version":"1.0.1","entity":"SignalEvent","event_id":"ev_ci_2","setup_ref":"MA_Crossover","instrument_ref":"KRX:005930","ts_event":"2024-12-10T00:00:00Z","payload":{"date":"2024-12-10","signal":"CROSS_DOWN"}}
EOF
          fi

      - name: Run DSL Validator (strict)
        run: |
          if [ ! -f "validator/dsl_checker.py" ]; then
            echo "::error::validator/dsl_checker.py not found"; exit 2; fi
          python validator/dsl_checker.py runs/sample_inputs/signal_events.jsonl --strict --report runs/ci/validator_report.json

      - name: Registry Cohesion Check (if registry.yaml exists)
        run: |
          if [ -f "ontology/registry.yaml" ]; then
            python tools/registry_cohesion_checker.py \
              --registry ontology/registry.yaml \
              --schema ontology/models/signal_event.schema.json \
              --schema ontology/models/trade.schema.json \
              --schema ontology/models/metric.schema.json \
              --out runs/ci/registry_cohesion_report.json
          else
            echo '{"ok":true,"note":"registry.yaml not present; cohesion check skipped"}' > runs/ci/registry_cohesion_report.json
          fi

      - name: Enforce Engine I/O Contract
        run: |
          if [ ! -f "engines/skeleton_backtest.py" ]; then
            echo "::error::engines/skeleton_backtest.py not found"; exit 5; fi
          python - <<'PY'
          import sys, re, pathlib
          p = pathlib.Path("engines/skeleton_backtest.py")
          txt = p.read_text(encoding="utf-8", errors="ignore")
          errs = []
          if "SignalEvent" not in txt and "signal_events_jsonl" not in txt and "jloadl(" not in txt:
            errs.append("Engine must accept/consume SignalEvent stream.")
          if re.search(r"read_prices_csv\\(", txt) and "jloadl(" not in txt:
            errs.append("Engine appears to rely on CSV without SignalEvent adapter usage.")
          if errs:
            print("::error::" + " | ".join(errs))
            sys.exit(6)
          print("Engine I/O contract check passed.")
          PY

      - name: Ensure sample price CSV
        run: |
          if [ ! -f "runs/sample_inputs/prices.csv" ]; then
            cat > runs/sample_inputs/prices.csv << 'EOF'
date,open,high,low,close
2024-12-02,70000,71000,69000,70500
2024-12-03,70600,71200,70100,71000
2024-12-04,71100,72000,70900,71900
2024-12-05,72000,72500,71500,72000
2024-12-06,72100,73000,72000,72900
2024-12-09,73000,73500,72500,73300
2024-12-10,73400,74000,73000,73800
2024-12-11,73900,74200,73500,74000
EOF
          fi

      - name: Run Engine Smoke (SignalEvent + Price CSV)
        run: |
          python engines/skeleton_backtest.py runs/sample_inputs/signal_events.jsonl runs/sample_inputs/prices.csv runs/ci

      - name: Verify Engine Artifacts
        run: |
          test -s runs/ci/trades.jsonl || (echo "::error::trades.jsonl not produced" && exit 7)
          test -s runs/ci/metrics.json  || (echo "::error::metrics.json not produced" && exit 7)

      - name: Upload CI Reports
        uses: actions/upload-artifact@v4
        with:
          name: ontology-ci-reports
          path: runs/ci/

      - name: Fail on Cohesion Diffs
        if: always()
        run: |
          python - <<'PY'
          import json, sys, os
          p='runs/ci/registry_cohesion_report.json'
          if os.path.exists(p):
            d=json.load(open(p,encoding="utf-8"))
            if not d.get("ok", True):
              print("Cohesion check failed with diffs:", d.get("diffs"))
              sys.exit(3)
          PY

      - name: Post CI Summary as PR Comment
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            function tryRead(p){ try{ return JSON.parse(fs.readFileSync(p, 'utf8')); }catch(e){ return null; } }
            const vr = tryRead('runs/ci/validator_report.json') || {};
            const cr = tryRead('runs/ci/registry_cohesion_report.json') || {};
            const ok  = (vr.summary?.pass !== false) && (cr.ok !== false);
            const diffs = (cr.diffs && cr.diffs.length) ? `\n\n**Cohesion Diffs**:\n\`\`\`json\n${JSON.stringify(cr.diffs, null, 2)}\n\`\`\`` : '';
            const body = [
              `### âœ… Ontology CI Summary`,
              `- DSL Validator(strict): **${vr.summary?.pass === false ? 'FAIL' : 'PASS'}**`,
              `- Registry Cohesion: **${cr.ok === false ? 'FAIL' : 'PASS'}**`,
              `- Artifacts: trades.jsonl & metrics.json`,
              diffs
            ].join('\n');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            });