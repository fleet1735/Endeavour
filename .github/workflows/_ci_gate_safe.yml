name: "ci-gate-safe (no uses/secrets)"

on:
  push:
  workflow_dispatch:

jobs:
  validate:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Fetch repo via codeload (public)
        run: |
          set -e
          rm -rf work && mkdir -p work
          curl -L -o src.zip "https://codeload.github.com/fleet1735/Endeavour/zip/refs/heads/main"
          unzip -q src.zip -d work
          mv work/Endeavour-main work/src

      - name: Python env + deps
        run: |
          set -e
          python3 --version || true
          pip3 --version || true
          python3 -m pip install --user --upgrade pip
          python3 -m pip install --user pyyaml jsonschema

      - name: CF-ONT-101..105 (inline, no external actions)
        continue-on-error: true
        run: |
          set -e
          cd work/src
          python3 - <<'PY'
import json, glob, datetime, os
os.makedirs("runs/ci", exist_ok=True)
def validate_signal(s):
  e=[]
  if s.get("price_update_time")==s.get("signal_time"): e.append("CF-101")
  if s.get("data_delay_ms",0)>3000: e.append("CF-102")
  if s.get("confidence_score",1)<0.3: e.append("CF-103")
  if s.get("override_flag") and s.get("confidence_score",1)<0.1: e.append("CF-105")
  return e
files=sorted(set(glob.glob("runs/**/*.json",recursive=True)+glob.glob("engine/**/*.json",recursive=True)+glob.glob("**/signals*.json",recursive=True)))
ok=True; details=[]
for f in files:
  try: obj=json.load(open(f,"r",encoding="utf-8"))
  except: continue
  sigs=[]
  if isinstance(obj,dict):
    if obj.get("type")=="SignalEvent": sigs=[obj]
    elif isinstance(obj.get("signals"),list): sigs=obj["signals"]
  for s in sigs:
    errs=validate_signal(s); details.append({"file":f,"errors":errs}); ok = ok and (not errs)
open("runs/ci/cf_ont_101.json","w",encoding="utf-8").write(json.dumps({"pass":ok,"details":details},ensure_ascii=False,indent=2))
print("CF-ONT-101..105 pass=",ok)
PY

      - name: CF-ONT-201 (inline minimal)
        continue-on-error: true
        run: |
          set -e
          cd work/src
          python3 - <<'PY'
import json, os, yaml
os.makedirs("runs/ci", exist_ok=True)
status={"pass": True, "checks":[]}
p=None
for c in ("registry.yaml","registry.yml"):
  if os.path.exists(c): p=c; break
if not p:
  status["pass"]=False; status["checks"].append({"id":"REG-001","msg":"registry not found"})
else:
  try:
    data=yaml.safe_load(open(p,"r",encoding="utf-8"))
    if not isinstance(data,dict):
      status["pass"]=False; status["checks"].append({"id":"REG-002","msg":"root must be mapping"})
  except Exception as e:
    status["pass"]=False; status["checks"].append({"id":"REG-003","msg":f"YAML error: {e}"})
open("runs/ci/cf_ont_201.json","w",encoding="utf-8").write(json.dumps(status,ensure_ascii=False,indent=2))
print("CF-ONT-201 pass=",status["pass"])
PY

      - name: Summarize
        run: |
          set -e
          cd work/src
          python3 - <<'PY'
import json, os
rep={}
for fn in ("runs/ci/cf_ont_101.json","runs/ci/cf_ont_201.json"):
  if os.path.exists(fn): rep[os.path.basename(fn)]=json.load(open(fn,"r",encoding="utf-8"))
rep["summary"]={"pass": all(v.get("pass",False) for v in rep.values()) if rep else False}
print("VALIDATOR_REPORT:", json.dumps(rep,ensure_ascii=False))
PY
